node('master') { // 指定 master 节点

    stage('Clean master Workspace') {
        // 清空工作区
        deleteDir()
    }

    stage('Clone OpenCV') {
        sh 'git clone https://github.mtftm.com/Leetfs/opencv.git ./opencv'
        sh 'git clone https://github.mtftm.com/Leetfs/opencv-riscv-perf.git ./perf'
    }

    stage('Build OpenCV for RISC-V Vector') {
        sh '''
                cd ./opencv && mkdir build-vector && cd build-vector
                cmake -D CMAKE_BUILD_TYPE=Release \
                -D CMAKE_CXX_FLAGS="-static -O3 -march=rv64imafdcv" \
                -D CMAKE_C_FLAGS="-static -O3 -march=rv64imafdcv" \
                -D ENABLE_PERF_TESTS=ON \
                -D WITH_EIGEN=ON \
                -D CMAKE_INSTALL_PREFIX=./install \
                -D CMAKE_TOOLCHAIN_FILE=../../perf/toolchain-riscv64.cmake \
                -D BUILD_TESTS=ON \
                -D BUILD_EXAMPLES=OFF \
                -D BUILD_DOCS=OFF \
                -D BUILD_opencv_core=ON \
                -D BUILD_opencv_imgproc=ON ..
                make opencv_perf_core opencv_perf_imgproc -j $(nproc)
            '''
    }
    
    stage('Build OpenCV for RISC-V') {
        sh '''
                cd ./opencv && mkdir build && cd build
                cmake -D CMAKE_BUILD_TYPE=Release \
                -D CMAKE_CXX_FLAGS="-static -O3 -march=rv64imafdc" \
                -D CMAKE_C_FLAGS="-static -O3 -march=rv64imafdc" \
                -D ENABLE_PERF_TESTS=ON \
                -D WITH_EIGEN=ON \
                -D CMAKE_INSTALL_PREFIX=./install \
                -D CMAKE_TOOLCHAIN_FILE=../../perf/toolchain-riscv64.cmake \
                -D BUILD_TESTS=ON \
                -D BUILD_EXAMPLES=OFF \
                -D BUILD_DOCS=OFF \
                -D BUILD_opencv_core=ON \
                -D BUILD_opencv_imgproc=ON ..
                make opencv_perf_core opencv_perf_imgproc -j $(nproc)
            '''
    }
    
    stage('stash buildFiles') {
        stash name: 'buildFiles-core', includes: 'opencv/build/bin/opencv_perf_core,opencv/build-vector/bin/opencv_perf_core'
        stash name: 'buildFiles-imgproc', includes: 'opencv/build/bin/opencv_perf_imgproc,opencv/build-vector/bin/opencv_perf_imgproc'
        stash name: 'samples', includes: 'opencv/samples/data/*'
    }
}

node {
    
    stage('Perf Test') {
        parallel(
            "Core Perf Test": {
                node('RVV') {
                    // 清空工作区
                    stage('Clean Workspace') {
                        deleteDir()
                    }

                    // 下载构建文件
                    stage('unstash buildFiles-core') {
                        unstash 'buildFiles-core'
                    }

                    // RV Core Perf Test
                    stage('RV Core Perf Test') {
                        // catchError 用于捕获异常，如果出现异常则不会影响后续流程
                        // buildResult: 'SUCCESS'：即使 Stage 失败，构建仍然会标记为成功。
                        // stageResult: 'SUCCESS'：即使 Stage 失败，该阶段仍然会被标记为成功。

                        // 为什么要这样设置：opencv_perf_imgproc 模块的许多测试用例依赖其它资源，
                        // 我已经在 Set up test files 阶段中匹配了大部分资源，但是还有一些资源没有匹配到（opencv仓库文件夹里没有）。
                        // 所以这里设置为即使 Stage 失败，构建仍然会标记为成功，这是预期行为。

                        // core 模块可以通过全部的测试用例，配置此项是为了防止不稳定的测试导致构建失败。（跑完预计要 12 小时呐）。
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        sh '''
                        mkdir -p output
                        cd ./opencv/build/bin/
                        chmod +x opencv_perf_core
                        ./opencv_perf_core --perf_min_samples=50 --perf_force_samples=50 --gtest_output=json:../../../output/RV_core_test_report.json
                        '''
                        }
                    }

                    // RVV Core Perf Test
                    stage('RVV Core Perf Test') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        sh '''
                        cd ./opencv/build-vector/bin/
                        chmod +x opencv_perf_core
                        ./opencv_perf_core --perf_min_samples=50 --perf_force_samples=50 --gtest_output=json:../../../output/RVV_core_test_report.json
                        '''
                        }
                    }

                    stage('stash core test report') {
                    stash name: 'core', includes: 'output/*'
                    }
                }
                
            },
            "Imgproc Perf Test": {
                node('RVV') {
                    // 清空工作区
                    stage('Clean Workspace') {
                        deleteDir()
                    }

                    // 下载构建文件
                    stage('unstash buildFiles-imgproc') {
                        unstash 'buildFiles-imgproc'
                        unstash 'samples'
                    }

                    // 配置测试依赖
                    stage('Set up test files') {
                        sh '''
                        mkdir -p opencv/build/bin/cv/imgproc
                        mkdir -p opencv/build-vector/bin/cv/imgproc

                        mkdir -p opencv/build/bin/gpu/opticalflow/
                        mkdir -p opencv/build-vector/bin/gpu/opticalflow/

                        mkdir -p opencv/build/bin/cv/shared/
                        mkdir -p opencv/build-vector/bin/cv/shared/

                        mkdir -p opencv/build/bin/cv/detectors_descriptors_evaluation/images_datasets/leuven/
                        mkdir -p opencv/build-vector/bin/cv/detectors_descriptors_evaluation/images_datasets/leuven/

                        mkdir -p opencv/build/bin/cv/optflow/
                        mkdir -p opencv/build-vector/bin/cv/optflow/

                        cp -r opencv/samples/data/* opencv/build/bin/cv/imgproc
                        cp -r opencv/samples/data/* opencv/build-vector/bin/cv/imgproc

                        cp opencv/samples/data/rubberwhale1.png opencv/build/bin/gpu/opticalflow/
                        cp opencv/samples/data/rubberwhale1.png opencv/build-vector/bin/gpu/opticalflow/

                        cp opencv/samples/data/pic5.png opencv/build/bin/cv/shared/
                        cp opencv/samples/data/pic5.png opencv/build-vector/bin/cv/shared/

                        cp opencv/samples/data/lena.png opencv/build/bin/cv/shared/
                        cp opencv/samples/data/lena.png opencv/build-vector/bin/cv/shared/

                        cp opencv/samples/data/img1.png opencv/build/bin/cv/detectors_descriptors_evaluation/images_datasets/leuven/
                        cp opencv/samples/data/img1.png opencv/build-vector/bin/cv/detectors_descriptors_evaluation/images_datasets/leuven/

                        cp opencv/samples/data/fruits.png opencv/build/bin/cv/shared/
                        cp opencv/samples/data/fruits.png opencv/build-vector/bin/cv/shared/

                        cp opencv/samples/data/RubberWhale1.png opencv/build/bin/cv/optflow/
                        cp opencv/samples/data/RubberWhale1.png opencv/build-vector/bin/cv/optflow/
                        '''
                    }

                    // RV Imgproc Perf Test
                    stage('RV Imgproc Perf Test') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        sh '''
                        mkdir -p output
                        cd ./opencv/build/bin/
                        chmod +x opencv_perf_imgproc
                        ./opencv_perf_imgproc --perf_min_samples=50 --perf_force_samples=50 --gtest_output=json:../../../output/RV_imgproc_test_report.json
                        '''
                        }
                    }

                    // RVV Imgproc Perf Test
                    stage('RVV Imgproc Perf Test') {
                        catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                        sh '''
                        cd ./opencv/build-vector/bin/
                        chmod +x opencv_perf_imgproc
                        ./opencv_perf_imgproc --perf_min_samples=50 --perf_force_samples=50 --gtest_output=json:../../../output/RVV_imgproc_test_report.json
                        '''
                        }
                    }

                    stage('stash imgproc test report') {
                    stash name: 'imgproc', includes: 'output/*'
                    }
                }
            }
        )
    }
}

node('master') { // 指定 master 节点

    stage('unstash output') {
        unstash 'core'
        unstash 'imgproc'
    }

    stage('Generate Test Report') {
        sh '''
            cd perf
            python3 test_report.py
        '''
        publishHTML (target : [allowMissing: false,
        alwaysLinkToLastBuild: true,
        keepAll: true,
        reportDir: './',
        reportFiles: 'test_report.html',
        reportName: 'TestReport',
        reportTitles: '测试报告'])
        
    }
}